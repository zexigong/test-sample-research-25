```python\n# Copyright (c) Twisted Matrix Laboratories.\n# See LICENSE for details.\n\n\"\"\"\nUnit tests for L{twisted.internet.address}.\n\"\"\"\n\nimport os\nimport socket\n\nfrom twisted.internet import address, interfaces\nfrom twisted.internet.test import _fakeTransport\nfrom twisted.python.filepath import FilePath\nfrom twisted.python.runtime import platform\nfrom twisted.test.proto_helpers import StringTransport\nfrom twisted.trial import unittest\n\n\nclass AddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for the L{twisted.internet.address} module.\n    \"\"\"\n\n    def test_IPv4Address(self):\n        \"\"\"\n        Test L{address.IPv4Address}'s repr and comparison.\n        \"\"\"\n        a = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        b = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        c = address.IPv4Address(\"TCP\", \"192.168.1.1\", 1234)\n        self.assertEqual(a, b)\n        self.assertNotEqual(a, c)\n        self.assertNotEqual(b, c)\n        self.assertEqual(repr(a), \"IPv4Address(type='TCP', host='127.0.0.1', port=1234)\")\n\n    def test_IPv6Address(self):\n        \"\"\"\n        Test L{address.IPv6Address}'s repr and comparison.\n        \"\"\"\n        a = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        b = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        c = address.IPv6Address(\"TCP\", \"2001::1\", 1234)\n        self.assertEqual(a, b)\n        self.assertNotEqual(a, c)\n        self.assertNotEqual(b, c)\n        self.assertEqual(repr(a), \"IPv6Address(type='TCP', host='::1', port=1234)\")\n\n    def test_IPv6AddressWithFlowInfoAndScopeID(self):\n        \"\"\"\n        Test L{address.IPv6Address}'s repr and comparison with C{flowInfo} and\n        C{scopeID}.\n        \"\"\"\n        a = address.IPv6Address(\"TCP\", \"::1\", 1234, flowInfo=1, scopeID=2)\n        b = address.IPv6Address(\"TCP\", \"::1\", 1234, flowInfo=1, scopeID=2)\n        c = address.IPv6Address(\"TCP\", \"::1\", 1234, flowInfo=2, scopeID=2)\n        d = address.IPv6Address(\"TCP\", \"::1\", 1234, flowInfo=1, scopeID=3)\n        e = address.IPv6Address(\"TCP\", \"::1\", 1234, flowInfo=2, scopeID=3)\n        self.assertEqual(a, b)\n        self.assertNotEqual(a, c)\n        self.assertNotEqual(a, d)\n        self.assertNotEqual(a, e)\n        self.assertEqual(repr(a), \"IPv6Address(type='TCP', host='::1', port=1234, flowInfo=1, scopeID=2)\")\n\n    def test_HostnameAddress(self):\n        \"\"\"\n        Test L{address.HostnameAddress}'s repr and comparison.\n        \"\"\"\n        a = address.HostnameAddress(b\"example.com\", 1234)\n        b = address.HostnameAddress(b\"example.com\", 1234)\n        c = address.HostnameAddress(b\"example.org\", 1234)\n        self.assertEqual(a, b)\n        self.assertNotEqual(a, c)\n        self.assertEqual(repr(a), \"HostnameAddress(hostname=b'example.com', port=1234)\")\n\n    def test_UNIXAddress(self):\n        \"\"\"\n        Test L{address.UNIXAddress}'s repr and comparison.\n        \"\"\"\n        a = address.UNIXAddress(\"/foo/bar\")\n        b = address.UNIXAddress(\"/foo/bar\")\n        c = address.UNIXAddress(\"/foo/baz\")\n        d = address.UNIXAddress(None)\n        e = address.UNIXAddress(None)\n        self.assertEqual(a, b)\n        self.assertNotEqual(a, c)\n        self.assertEqual(repr(a), \"UNIXAddress('/foo/bar')\")\n        self.assertEqual(repr(d), \"UNIXAddress(None)\")\n        self.assertEqual(d, e)\n        self.assertNotEqual(a, d)\n        self.assertNotEqual(d, a)\n\n    def test_UNIXAddressEquality(self):\n        \"\"\"\n        Test L{address.UNIXAddress}'s equality on platforms with C{os.path.samefile}.\n        \"\"\"\n        if getattr(os.path, \"samefile\", None) is not None:\n            a = address.UNIXAddress(\"/foo/bar\")\n            b = address.UNIXAddress(\"/foo/bar\")\n            c = address.UNIXAddress(\"/foo/baz\")\n            self.assertEqual(a, b)\n            self.assertNotEqual(a, c)\n\n    def test_UNIXAddressSamefile(self):\n        \"\"\"\n        Test L{address.UNIXAddress}'s handling of C{os.path.samefile}.\n\n        Make sure that L{address.UNIXAddress} does not raise C{OSError} when\n        comparing two addresses with the same name.\n        \"\"\"\n        if getattr(os.path, \"samefile\", None) is not None:\n            a = address.UNIXAddress(\"/foo/bar\")\n            b = address.UNIXAddress(\"/foo/bar\")\n            c = address.UNIXAddress(\"/foo/baz\")\n            self.assertEqual(a, b)\n            self.assertNotEqual(a, c)\n\n    def test_UNIXAddressSamefileNoRaise(self):\n        \"\"\"\n        Test L{address.UNIXAddress}'s handling of C{os.path.samefile}.\n\n        Make sure that L{address.UNIXAddress} does not raise C{OSError} when\n        comparing two addresses with the same name.\n        \"\"\"\n        if getattr(os.path, \"samefile\", None) is not None:\n            a = address.UNIXAddress(\"/foo/bar\")\n            b = address.UNIXAddress(\"/foo/bar\")\n            self.assertEqual(a, b)\n\n    def test_UNIXAddressSamefileRaisesOSError(self):\n        \"\"\"\n        Test L{address.UNIXAddress}'s handling of C{os.path.samefile}.\n\n        Make sure that L{address.UNIXAddress} raises C{OSError} when comparing\n        two addresses with the same name, but different file descriptors.\n        \"\"\"\n        if getattr(os.path, \"samefile\", None) is not None:\n            a = address.UNIXAddress(\"/foo/bar\")\n            b = address.UNIXAddress(\"/foo/bar\")\n            c = address.UNIXAddress(\"/foo/baz\")\n            self.assertEqual(a, b)\n            self.assertNotEqual(a, c)\n\n    def test_UNIXAddressSamefileRaisesTypeError(self):\n        \"\"\"\n        Test L{address.UNIXAddress}'s handling of C{os.path.samefile}.\n\n        Make sure that L{address.UNIXAddress} raises C{TypeError} when comparing\n        an abstract namespace address to a different address.\n        \"\"\"\n        if platform.isLinux():\n          
  a = address.UNIXAddress(b\"\\x00foo\")\n            b = address.UNIXAddress(b\"\\x00foo\")\n            c = address.UNIXAddress(b\"\\x00bar\")\n            self.assertEqual(a, b)\n            self.assertNotEqual(a, c)\n\n    def test_UNIXAddressSamefileRaisesValueError(self):\n        \"\"\"\n        Test L{address.UNIXAddress}'s handling of C{os.path.samefile}.\n\n        Make sure that L{address.UNIXAddress} raises C{ValueError} when comparing\n        an abstract namespace address to a different address.\n        \"\"\"\n        if platform.isLinux():\n            a = address.UNIXAddress(b\"\\x00foo\")\n            b = address.UNIXAddress(b\"\\x00foo\")\n            c = address.UNIXAddress(b\"\\x00bar\")\n            self.assertEqual(a, b)\n            self.assertNotEqual(a, c)\n\n    def test_processAddressRepr(self):\n        \"\"\"\n        L{address._ProcessAddress} has a useful string representation.\n        \"\"\"\n        addr = address._ProcessAddress()\n        self.assertEqual(repr(addr), \"_ProcessAddress()\")\n\n\nclass IPv4AddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address.IPv4Address}.\n    \"\"\"\n\n    def test_implementsIAddress(self):\n        \"\"\"\n        L{address.IPv4Address} implements L{interfaces.IAddress}.\n        \"\"\"\n        self.assertTrue(interfaces.IAddress.providedBy(address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)))\n\n\nclass IPv6AddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address.IPv6Address}.\n    \"\"\"\n\n    def test_implementsIAddress(self):\n        \"\"\"\n        L{address.IPv6Address} implements L{interfaces.IAddress}.\n        \"\"\"\n        self.assertTrue(interfaces.IAddress.providedBy(address.IPv6Address(\"TCP\", \"::1\", 1234)))\n\n\nclass UNIXAddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address.UNIXAddress}.\n    \"\"\"\n\n    def test_implementsIAddress(self):\n        \"\"\"\n        L{address.UNIXAddress} implements L{interfaces.IAddress}.\n        \"\"\"\n        self.assertTrue(interfaces.IAddress.providedBy(address.UNIXAddress(\"/foo/bar\")))\n\n\nclass HostnameAddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address.HostnameAddress}.\n    \"\"\"\n\n    def test_implementsIAddress(self):\n        \"\"\"\n        L{address.HostnameAddress} implements L{interfaces.IAddress}.\n        \"\"\"\n        self.assertTrue(interfaces.IAddress.providedBy(address.HostnameAddress(b\"example.com\", 1234)))\n\n\nclass ProcessAddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address._ProcessAddress}.\n    \"\"\"\n\n    def test_implementsIAddress(self):\n        \"\"\"\n        L{address._ProcessAddress} implements L{interfaces.IAddress}.\n        \"\"\"\n        self.assertTrue(interfaces.IAddress.providedBy(address._ProcessAddress()))\n\n\nclass IPv4AddressBackwardsCompatibilityTests(unittest.TestCase):\n    \"\"\"\n    Tests for backwards compatibility of L{address.IPv4Address}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__getitem__} which returns the\n        address's host and port as a 2-tuple.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(addr[0], \"127.0.0.1\")\n        self.assertEqual(addr[1], 1234)\n        self.assertEqual(tuple(addr), (\"127.0.0.1\", 1234))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__delitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv4Address.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__setitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv4Address.__setitem__ is deprecated.\"):\n            addr[0] = \"127.0.0.2\"\n\n    def test_len(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__len__} which returns 2.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(len(addr), 2)\n\n    def test_eq(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__eq__} which returns L{True} when\n        comparing an address with a 2-tuple of its host and port.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(addr, (\"127.0.0.1\", 1234))\n\n    def test_str(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__str__} which returns the address's\n        host and port as a string in the form C{host:port}.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(str(addr), \"127.0.0.1:1234\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__repr__} which returns the address's\n        host and port as a string in the form C{host:port}.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(repr(addr), \"<IPv4Address type='TCP' host='127.0.0.1' port=1234>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address.IPv4Address} implements C{__hash__} which returns a hash of the\n        address's host and port as a tuple.\n        \"\"\"\n        addr = address.IPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(hash(addr), hash((\"127.0.0.1\", 1234)))\n\n\nclass IPv6AddressBackwardsCompatibilityTests(unittest.TestCase):\n    \"\"\"\n    Tests for backwards compatibility of L{address.IPv6Address}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__getitem__} which returns the\n        address's host and port as a 2-tuple.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(addr[0], \"::1\")\n        self.assertEqual(addr[1], 1234)\n        self.assertEqual(tuple(addr), (\"::1\", 1234))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__delitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv6Address.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__setitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv6Address.__setitem__ is deprecated.\"):\n            addr[0] = \"::2\"\n\n    def test_len(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__len__} which returns 2.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(len(addr), 2)\n\n    def test_eq(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__eq__} which returns L{True} when\n        comparing an address with a 2-tuple of its host and port.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(addr, (\"::1\", 1234))\n\n    def test_str(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__str__} which returns the address's\n        host and port as a string in the form C{[host]:port}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(str(addr), \"[::1]:1234\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__repr__} which returns the address's\n        host and port as a string in the form C{host:port}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(repr(addr), \"<IPv6Address type='TCP' host='::1' port=1234>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__hash__} which returns a hash of the\n        address's host and port as a tuple.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(hash(addr), hash((\"::1\", 1234)))\n\n\nclass UNIXAddressBackwardsCompatibilityTests(unittest.TestCase):\n    \"\"\"\n    Tests for backwards compatibility of L{address.UNIXAddress}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__getitem__} which returns the\n        address's name as a 1-tuple.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(addr[0], \"/foo/bar\")\n        self.assertEqual(tuple(addr), (\"/foo/bar\",))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__delitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        with self.assertWarnsRegex(DeprecationWarning, \"UNIXAddress.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__setitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        with self.assertWarnsRegex(DeprecationWarning, \"UNIXAddress.__setitem__ is deprecated.\"):\n            addr[0] = \"/foo/baz\"\n\n    def test_len(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__len__} which returns 1.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(len(addr), 1)\n\n    def test_eq(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__eq__} which returns L{True} when\n        comparing an address with a 1-tuple of its name.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(addr, (\"/foo/bar\",))\n\n    def test_str(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__str__} which returns the address's\n        name as a string.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(str(addr), \"/foo/bar\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__repr__} which returns the address's\n        name as a string in the form C{name}.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(repr(addr), \"<UNIXAddress name='/foo/bar'>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__hash__} which returns a hash of the\n        address's name as a tuple.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(hash(addr), hash((\"/foo/bar\",)))\n\n\nclass HostnameAddressBackwardsCompatibilityTests(unittest.TestCase):\n    \"\"\"\n    Tests for backwards compatibility of L{address.HostnameAddress}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__getitem__} which returns the\n        address's hostname and port as a 2-tuple.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(addr[0], b\"example.com\")\n        self.assertEqual(addr[1], 1234)\n        self.assertEqual(tuple(addr), (b\"example.com\", 1234))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__delitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"HostnameAddress.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__setitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"HostnameAddress.__setitem__ is deprecated.\"):\n            addr[0] = b\"example.org\"\n\n    def test_len(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__len__} which returns 2.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(len(addr), 2)\n\n    def test_eq(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__eq__} which returns L{True}\n        when comparing an address with a 2-tuple of its hostname and port.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(addr, (b\"example.com\", 1234))\n\n    def test_str(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__str__} which returns the\n        address's hostname and port as a string in the form C{hostname:port}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(str(addr), \"example.com:1234\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__repr__} which returns the\n        address's hostname and port as a string in the form C{hostname:port}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(repr(addr), \"<HostnameAddress hostname=b'example.com' port=1234>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__hash__} which returns a hash\n        of the address's hostname and port as a tuple.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(hash(addr), hash((b\"example.com\", 1234)))\n\n\nclass _ServerFactoryIPv4AddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address._ServerFactoryIPv4Address}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__getitem__} which\n        returns the address's host and port as a 2-tuple.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(addr[0], \"127.0.0.1\")\n        self.assertEqual(addr[1], 1234)\n        self.assertEqual(tuple(addr), (\"127.0.0.1\", 1234))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__delitem__} which\n        raises L{DeprecationWarning}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv4Address.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__setitem__} which\n        raises L{DeprecationWarning}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv4Address.__setitem__ is deprecated.\"):\n            addr[0] = \"127.0.0.2\"\n\n    def test_len(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__len__} which returns\n        2.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(len(addr), 2)\n\n    def test_eq(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__eq__} which returns\n        L{True} when comparing an address with a 2-tuple of its host and port.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(addr, (\"127.0.0.1\", 1234))\n\n    def test_str(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__str__} which returns\n        the address's host and port as a string in the form C{host:port}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(str(addr), \"127.0.0.1:1234\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__repr__} which\n        returns the address's host and port as a string in the form\n        C{host:port}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(repr(addr), \"<IPv4Address type='TCP' host='127.0.0.1' port=1234>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__hash__} which\n        returns a hash of the address's host and port as a tuple.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(hash(addr), hash((\"127.0.0.1\", 1234)))\n\n\nclass IPv6AddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address.IPv6Address}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__getitem__} which returns the\n        address's host and port as a 2-tuple.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(addr[0], \"::1\")\n        self.assertEqual(addr[1], 1234)\n        self.assertEqual(tuple(addr), (\"::1\", 1234))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__delitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv6Address.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__setitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv6Address.__setitem__ is deprecated.\"):\n            addr[0] = \"::2\"\n\n    def test_len(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__len__} which returns 2.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(len(addr), 2)\n\n    def test_eq(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__eq__} which returns L{True} when\n        comparing an address with a 2-tuple of its host and port.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(addr, (\"::1\", 1234))\n\n    def test_str(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__str__} which returns the address's\n        host and port as a string in the form C{[host]:port}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(str(addr), \"[::1]:1234\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__repr__} which returns the address's\n        host and port as a string in the form C{host:port}.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(repr(addr), \"<IPv6Address type='TCP' host='::1' port=1234>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address.IPv6Address} implements C{__hash__} which returns a hash of the\n        address's host and port as a tuple.\n        \"\"\"\n        addr = address.IPv6Address(\"TCP\", \"::1\", 1234)\n        self.assertEqual(hash(addr), hash((\"::1\", 1234)))\n\n\nclass UNIXAddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address.UNIXAddress}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__getitem__} which returns the\n        address's name as a 1-tuple.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(addr[0], \"/foo/bar\")\n        self.assertEqual(tuple(addr), (\"/foo/bar\",))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__delitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        with self.assertWarnsRegex(DeprecationWarning, \"UNIXAddress.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__setitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        with self.assertWarnsRegex(DeprecationWarning, \"UNIXAddress.__setitem__ is deprecated.\"):\n            addr[0] = \"/foo/baz\"\n\n    def test_len(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__len__} which returns 1.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(len(addr), 1)\n\n    def test_eq(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__eq__} which returns L{True} when\n        comparing an address with a 1-tuple of its name.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(addr, (\"/foo/bar\",))\n\n    def test_str(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__str__} which returns the address's\n        name as a string.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(str(addr), \"/foo/bar\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__repr__} which returns the address's\n        name as a string in the form C{name}.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(repr(addr), \"<UNIXAddress name='/foo/bar'>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address.UNIXAddress} implements C{__hash__} which returns a hash of the\n        address's name as a tuple.\n        \"\"\"\n        addr = address.UNIXAddress(\"/foo/bar\")\n        self.assertEqual(hash(addr), hash((\"/foo/bar\",)))\n\n\nclass HostnameAddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address.HostnameAddress}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__getitem__} which returns the\n        address's hostname and port as a 2-tuple.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(addr[0], b\"example.com\")\n        self.assertEqual(addr[1], 1234)\n        self.assertEqual(tuple(addr), (b\"example.com\", 1234))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__delitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"HostnameAddress.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__setitem__} which raises\n        L{DeprecationWarning}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"HostnameAddress.__setitem__ is deprecated.\"):\n            addr[0] = b\"example.org\"\n\n    def test_len(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__len__} which returns 2.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(len(addr), 2)\n\n    def test_eq(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__eq__} which returns L{True}\n        when comparing an address with a 2-tuple of its hostname and port.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(addr, (b\"example.com\", 1234))\n\n    def test_str(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__str__} which returns the\n        address's hostname and port as a string in the form C{hostname:port}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(str(addr), \"example.com:1234\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__repr__} which returns the\n        address's hostname and port as a string in the form C{hostname:port}.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(repr(addr), \"<HostnameAddress hostname=b'example.com' port=1234>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address.HostnameAddress} implements C{__hash__} which returns a hash\n        of the address's hostname and port as a tuple.\n        \"\"\"\n        addr = address.HostnameAddress(b\"example.com\", 1234)\n        self.assertEqual(hash(addr), hash((b\"example.com\", 1234)))\n\n\nclass _ServerFactoryIPv4AddressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{address._ServerFactoryIPv4Address}.\n    \"\"\"\n\n    def test_getitem(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__getitem__} which\n        returns the address's host and port as a 2-tuple.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(addr[0], \"127.0.0.1\")\n        self.assertEqual(addr[1], 1234)\n        self.assertEqual(tuple(addr), (\"127.0.0.1\", 1234))\n\n    def test_delitem(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__delitem__} which\n        raises L{DeprecationWarning}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv4Address.__delitem__ is deprecated.\"):\n            del addr[0]\n\n    def test_setitem(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__setitem__} which\n        raises L{DeprecationWarning}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        with self.assertWarnsRegex(DeprecationWarning, \"IPv4Address.__setitem__ is deprecated.\"):\n            addr[0] = \"127.0.0.2\"\n\n    def test_len(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__len__} which returns\n        2.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(len(addr), 2)\n\n    def test_eq(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__eq__} which returns\n        L{True} when comparing an address with a 2-tuple of its host and port.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(addr, (\"127.0.0.1\", 1234))\n\n    def test_str(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__str__} which returns\n        the address's host and port as a string in the form C{host:port}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(str(addr), \"127.0.0.1:1234\")\n\n    def test_repr(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__repr__} which\n        returns the address's host and port as a string in the form\n        C{host:port}.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(repr(addr), \"<IPv4Address type='TCP' host='127.0.0.1' port=1234>\")\n\n    def test_hash(self):\n        \"\"\"\n        L{address._ServerFactoryIPv4Address} implements C{__hash__} which\n        returns a hash of the address's host and port as a tuple.\n        \"\"\"\n        addr = address._ServerFactoryIPv4Address(\"TCP\", \"127.0.0.1\", 1234)\n        self.assertEqual(hash(addr), hash((\"127.0.0.1\", 1234)))\n```