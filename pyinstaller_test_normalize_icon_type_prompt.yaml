messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: pyinstaller\nTest File Path: pyinstaller\\\
    test_normalize_icon_type\\test_normalize_icon_type.py\nProject Programming Language:\
    \ Python\nTesting Framework: pytest\n### Source File Content\n### Source File\
    \ Content:\n#-----------------------------------------------------------------------------\n\
    # Copyright (c) 2022-2023, PyInstaller Development Team.\n#\n# Distributed under\
    \ the terms of the GNU General Public License (version 2\n# or later) with exception\
    \ for distributing the bootloader.\n#\n# The full license is in the file COPYING.txt,\
    \ distributed with this software.\n#\n# SPDX-License-Identifier: (GPL-2.0-or-later\
    \ WITH Bootloader-exception)\n#-----------------------------------------------------------------------------\n\
    \nfrom typing import Tuple\n\nimport os\nimport hashlib\n\n\ndef normalize_icon_type(icon_path:\
    \ str, allowed_types: Tuple[str], convert_type: str, workpath: str) -> str:\n\
    \    \"\"\"\n    Returns a valid icon path or raises an Exception on error.\n\
    \    Ensures that the icon exists, and, if necessary, attempts to convert it to\
    \ correct OS-specific format using Pillow.\n\n    Takes:\n    icon_path - the\
    \ icon given by the user\n    allowed_types - a tuple of icon formats that should\
    \ be allowed through\n        EX: (\"ico\", \"exe\")\n    convert_type - the type\
    \ to attempt conversion too if necessary\n        EX: \"icns\"\n    workpath -\
    \ the temp directory to save any newly generated image files\n    \"\"\"\n\n \
    \   # explicitly error if file not found\n    if not os.path.exists(icon_path):\n\
    \        raise FileNotFoundError(f\"Icon input file {icon_path} not found\")\n\
    \n    _, extension = os.path.splitext(icon_path)\n    extension = extension[1:]\
    \  # get rid of the \".\" in \".whatever\"\n\n    # if the file is already in\
    \ the right format, pass it back unchanged\n    if extension in allowed_types:\n\
    \        # Check both the suffix and the header of the file to guard against the\
    \ user confusing image types.\n        signatures = hex_signatures[extension]\n\
    \        with open(icon_path, \"rb\") as f:\n            header = f.read(max(len(s)\
    \ for s in signatures))\n        if any(list(header)[:len(s)] == s for s in signatures):\n\
    \            return icon_path\n\n    # The icon type is wrong! Let's try and import\
    \ PIL\n    try:\n        from PIL import Image as PILImage\n        import PIL\n\
    \n    except ImportError:\n        raise ValueError(\n            f\"Received\
    \ icon image '{icon_path}' which exists but is not in the correct format. On this\
    \ platform, \"\n            f\"only {allowed_types} images may be used as icons.\
    \ If Pillow is installed, automatic conversion will \"\n            f\"be attempted.\
    \ Please install Pillow or convert your '{extension}' file to one of {allowed_types}\
    \ \"\n            f\"and try again.\"\n        )\n\n    # Let's try to use PIL\
    \ to convert the icon file type\n    try:\n        _generated_name = f\"generated-{hashlib.sha256(icon_path.encode()).hexdigest()}.{convert_type}\"\
    \n        generated_icon = os.path.join(workpath, _generated_name)\n        with\
    \ PILImage.open(icon_path) as im:\n            # If an image uses a custom palette\
    \ + transparency, convert it to RGBA for a better alpha mask depth.\n        \
    \    if im.mode == \"P\" and im.info.get(\"transparency\", None) is not None:\n\
    \                # The bit depth of the alpha channel will be higher, and the\
    \ images will look better when eventually\n                # scaled to multiple\
    \ sizes (16,24,32,..) for the ICO format for example.\n                im = im.convert(\"\
    RGBA\")\n            im.save(generated_icon)\n        icon_path = generated_icon\n\
    \    except PIL.UnidentifiedImageError:\n        raise ValueError(\n         \
    \   f\"Something went wrong converting icon image '{icon_path}' to '.{convert_type}'\
    \ with Pillow, \"\n            f\"perhaps the image format is unsupported. Try\
    \ again with a different file or use a file that can \"\n            f\"be used\
    \ without conversion on this platform: {allowed_types}\"\n        )\n\n    return\
    \ icon_path\n\n\n# Possible initial bytes of icon types PyInstaller needs to be\
    \ able to recognise.\n# Taken from: https://en.wikipedia.org/wiki/List_of_file_signatures\n\
    hex_signatures = {\n    \"png\": [[0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]],\n\
    \    \"exe\": [[0x4D, 0x5A], [0x5A, 0x4D]],\n    \"ico\": [[0x00, 0x00, 0x01,\
    \ 0x00]],\n    \"icns\": [[0x69, 0x63, 0x6e, 0x73]],\n}\n\n### Source File Dependency\
    \ Files Content\n### Dependency File: empty.txt\n\nOutput the complete test file,\
    \ code only, no explanations.\n### Time\nCurrent time: 2025-03-15 16:19:45\n"
  role: user
