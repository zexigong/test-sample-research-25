messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: pyinstaller\nTest File Path: pyinstaller\\\
    test_winmanifest\\test_winmanifest.py\nProject Programming Language: Python\n\
    Testing Framework: pytest\n### Source File Content\n### Source File Content:\n\
    #-----------------------------------------------------------------------------\n\
    # Copyright (c) 2013-2023, PyInstaller Development Team.\n#\n# Distributed under\
    \ the terms of the GNU General Public License (version 2\n# or later) with exception\
    \ for distributing the bootloader.\n#\n# The full license is in the file COPYING.txt,\
    \ distributed with this software.\n#\n# SPDX-License-Identifier: (GPL-2.0-or-later\
    \ WITH Bootloader-exception)\n#-----------------------------------------------------------------------------\n\
    import xml.dom\nimport xml.dom.minidom\n\n#- Relevant constants from Windows headers\n\
    # Manifest resource code\nRT_MANIFEST = 24\n\n# Resource IDs (names) for manifest.\n\
    # See: https://www.gamedev.net/blogs/entry/2154553-manifest-embedding-and-activation\n\
    CREATEPROCESS_MANIFEST_RESOURCE_ID = 1\nISOLATIONAWARE_MANIFEST_RESOURCE_ID =\
    \ 2\n\nLANG_NEUTRAL = 0\n\n#- Default application manifest template, based on\
    \ the one found in python executable.\n\n_DEFAULT_MANIFEST_XML = \\\nb\"\"\"<?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly xmlns=\"\
    urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n  <trustInfo xmlns=\"\
    urn:schemas-microsoft-com:asm.v3\">\n    <security>\n      <requestedPrivileges>\n\
    \        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"></requestedExecutionLevel>\n\
    \      </requestedPrivileges>\n    </security>\n  </trustInfo>\n  <compatibility\
    \ xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n    <application>\n \
    \     <supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\"></supportedOS>\n\
    \      <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"></supportedOS>\n\
    \      <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"></supportedOS>\n\
    \      <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"></supportedOS>\n\
    \      <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\"></supportedOS>\n\
    \    </application>\n  </compatibility>\n  <application xmlns=\"urn:schemas-microsoft-com:asm.v3\"\
    >\n    <windowsSettings>\n      <longPathAware xmlns=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\"\
    >true</longPathAware>\n    </windowsSettings>\n  </application>\n  <dependency>\n\
    \    <dependentAssembly>\n      <assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\"\
    \ version=\"6.0.0.0\" processorArchitecture=\"*\" publicKeyToken=\"6595b64144ccf1df\"\
    \ language=\"*\"></assemblyIdentity>\n    </dependentAssembly>\n  </dependency>\n\
    </assembly>\n\"\"\"  # noqa: E122,E501\n\n#- DOM navigation helpers\n\n\ndef _find_elements_by_tag(root,\
    \ tag):\n    \"\"\"\n    Find all elements with given tag under the given root\
    \ element.\n    \"\"\"\n    return [node for node in root.childNodes if node.nodeType\
    \ == xml.dom.Node.ELEMENT_NODE and node.tagName == tag]\n\n\ndef _find_element_by_tag(root,\
    \ tag):\n    \"\"\"\n    Attempt to find a single element with given tag under\
    \ the given root element, and return None if no such element\n    is found. Raises\
    \ an error if multiple elements are found.\n    \"\"\"\n    elements = _find_elements_by_tag(root,\
    \ tag)\n    if len(elements) > 1:\n        raise ValueError(f\"Expected a single\
    \ {tag!r} element, found {len(elements)} element(s)!\")\n    if not elements:\n\
    \        return None\n    return elements[0]\n\n\n#- Application manifest modification\
    \ helpers\n\n\ndef _set_execution_level(manifest_dom, root_element, uac_admin=False,\
    \ uac_uiaccess=False):\n    \"\"\"\n    Find <security> -> <requestedPrivileges>\
    \ -> <requestedExecutionLevel> element, and set its `level` and `uiAccess`\n \
    \   attributes based on supplied arguments. Create the XML elements if necessary,\
    \ as they are optional.\n    \"\"\"\n\n    # <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"\
    >\n    trust_info_element = _find_element_by_tag(root_element, \"trustInfo\")\n\
    \    if not trust_info_element:\n        trust_info_element = manifest_dom.createElement(\"\
    trustInfo\")\n        trust_info_element.setAttribute(\"xmlns\", \"urn:schemas-microsoft-com:asm.v3\"\
    )\n        root_element.appendChild(trust_info_element)\n\n    # <security>\n\
    \    security_element = _find_element_by_tag(trust_info_element, \"security\"\
    )\n    if not security_element:\n        security_element = manifest_dom.createElement(\"\
    security\")\n        trust_info_element.appendChild(security_element)\n\n    #\
    \ <requestedPrivileges>\n    requested_privileges_element = _find_element_by_tag(security_element,\
    \ \"requestedPrivileges\")\n    if not requested_privileges_element:\n       \
    \ requested_privileges_element = manifest_dom.createElement(\"requestedPrivileges\"\
    )\n        security_element.appendChild(requested_privileges_element)\n\n    #\
    \ <requestedExecutionLevel>\n    requested_execution_level_element = _find_element_by_tag(requested_privileges_element,\
    \ \"requestedExecutionLevel\")\n    if not requested_execution_level_element:\n\
    \        requested_execution_level_element = manifest_dom.createElement(\"requestedExecutionLevel\"\
    )\n        requested_privileges_element.appendChild(requested_execution_level_element)\n\
    \n    requested_execution_level_element.setAttribute(\"level\", \"requireAdministrator\"\
    \ if uac_admin else \"asInvoker\")\n    requested_execution_level_element.setAttribute(\"\
    uiAccess\", \"true\" if uac_uiaccess else \"false\")\n\n\ndef _ensure_common_controls_dependency(manifest_dom,\
    \ root_element):\n    \"\"\"\n    Scan <dependency> elements for the one whose\
    \ <<dependentAssembly> -> <assemblyIdentity> corresponds to the\n    `Microsoft.Windows.Common-Controls`.\
    \ If found, overwrite its properties. If not, create new <dependency>\n    element\
    \ with corresponding sub-elements and attributes.\n    \"\"\"\n\n    # <dependency>\n\
    \    dependency_elements = _find_elements_by_tag(root_element, \"dependency\"\
    )\n    for dependency_element in dependency_elements:\n        # <dependentAssembly>\n\
    \        dependent_assembly_element = _find_element_by_tag(dependency_element,\
    \ \"dependentAssembly\")\n        # <assemblyIdentity>\n        assembly_identity_element\
    \ = _find_element_by_tag(dependent_assembly_element, \"assemblyIdentity\")\n \
    \       # Check the name attribute\n        if assembly_identity_element.attributes[\"\
    name\"].value == \"Microsoft.Windows.Common-Controls\":\n            common_controls_element\
    \ = assembly_identity_element\n            break\n    else:\n        # Create\
    \ <dependency>\n        dependency_element = manifest_dom.createElement(\"dependency\"\
    )\n        root_element.appendChild(dependency_element)\n        # Create <dependentAssembly>\n\
    \        dependent_assembly_element = manifest_dom.createElement(\"dependentAssembly\"\
    )\n        dependency_element.appendChild(dependent_assembly_element)\n      \
    \  # Create <assemblyIdentity>\n        common_controls_element = manifest_dom.createElement(\"\
    assemblyIdentity\")\n        dependent_assembly_element.appendChild(common_controls_element)\n\
    \n    common_controls_element.setAttribute(\"type\", \"win32\")\n    common_controls_element.setAttribute(\"\
    name\", \"Microsoft.Windows.Common-Controls\")\n    common_controls_element.setAttribute(\"\
    version\", \"6.0.0.0\")\n    common_controls_element.setAttribute(\"processorArchitecture\"\
    , \"*\")\n    common_controls_element.setAttribute(\"publicKeyToken\", \"6595b64144ccf1df\"\
    )\n    common_controls_element.setAttribute(\"language\", \"*\")\n\n\ndef create_application_manifest(manifest_xml=None,\
    \ uac_admin=False, uac_uiaccess=False):\n    \"\"\"\n    Create application manifest,\
    \ from built-in or custom manifest XML template. If provided, `manifest_xml` must\
    \ be\n    a string or byte string containing XML source. The returned manifest\
    \ is a byte string, encoded in UTF-8.\n\n    This function sets the attributes\
    \ of `requestedExecutionLevel` based on provided `uac_admin` and `auc_uiacces`\n\
    \    arguments (creating the parent elements in the XML, if necessary). It also\
    \ scans `dependency` elements for the\n    entry corresponding to `Microsoft.Windows.Common-Controls`\
    \ and creates or modifies it as necessary.\n    \"\"\"\n\n    if manifest_xml\
    \ is None:\n        manifest_xml = _DEFAULT_MANIFEST_XML\n\n    with xml.dom.minidom.parseString(manifest_xml)\
    \ as manifest_dom:\n        root_element = manifest_dom.documentElement\n\n  \
    \      # Validate root element - must be <assembly>\n        assert root_element.tagName\
    \ == \"assembly\"\n        assert root_element.namespaceURI == \"urn:schemas-microsoft-com:asm.v1\"\
    \n        assert root_element.attributes[\"manifestVersion\"].value == \"1.0\"\
    \n\n        # Modify the manifest\n        _set_execution_level(manifest_dom,\
    \ root_element, uac_admin, uac_uiaccess)\n        _ensure_common_controls_dependency(manifest_dom,\
    \ root_element)\n\n        # Create output XML\n        output = manifest_dom.toprettyxml(indent=\"\
    \  \", encoding=\"UTF-8\")\n\n    # Strip extra newlines\n    output = [line for\
    \ line in output.splitlines() if line.strip()]\n\n    # Replace: `<?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>` with `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    yes\"?>`.\n    # Support for `standalone` was added to `toprettyxml` in python\
    \ 3.9, so do a manual work around.\n    output[0] = b\"\"\"<?xml version=\"1.0\"\
    \ encoding=\"UTF-8\" standalone=\"yes\"?>\"\"\"\n\n    output = b\"\\n\".join(output)\n\
    \n    return output\n\n\ndef write_manifest_to_executable(filename, manifest_xml):\n\
    \    \"\"\"\n    Write the given manifest XML to the given executable's RT_MANIFEST\
    \ resource.\n    \"\"\"\n    from PyInstaller.utils.win32 import winresource\n\
    \n    # CREATEPROCESS_MANIFEST_RESOURCE_ID is used for manifest resource in executables.\n\
    \    # ISOLATIONAWARE_MANIFEST_RESOURCE_ID is used for manifest resources in DLLs.\n\
    \    names = [CREATEPROCESS_MANIFEST_RESOURCE_ID]\n\n    # Ensure LANG_NEUTRAL\
    \ is updated, and also update any other present languages.\n    languages = [LANG_NEUTRAL,\
    \ \"*\"]\n\n    winresource.add_or_update_resource(filename, manifest_xml, RT_MANIFEST,\
    \ names, languages)\n\n\ndef read_manifest_from_executable(filename):\n    \"\"\
    \"\n    Read manifest from the given executable.\"\n    \"\"\"\n    from PyInstaller.utils.win32\
    \ import winresource\n\n    resources = winresource.get_resources(filename, [RT_MANIFEST])\n\
    \n    # `resources` is a three-level dictionary:\n    #  - level 1: resource type\
    \ (RT_MANIFEST)\n    #  - level 2: resource name (CREATEPROCESS_MANIFEST_RESOURCE_ID)\n\
    \    #  - level 3: resource language (LANG_NEUTRAL)\n\n    # Level 1\n    if RT_MANIFEST\
    \ not in resources:\n        raise ValueError(f\"No RT_MANIFEST resources found\
    \ in {filename!r}.\")\n    resources = resources[RT_MANIFEST]\n\n    # Level 2\n\
    \    if CREATEPROCESS_MANIFEST_RESOURCE_ID not in resources:\n        raise ValueError(f\"\
    No RT_MANIFEST resource named CREATEPROCESS_MANIFEST_RESOURCE_ID found in {filename!r}.\"\
    )\n    resources = resources[CREATEPROCESS_MANIFEST_RESOURCE_ID]\n\n    # Level\
    \ 3\n    # We prefer LANG_NEUTRAL, but allow fall back to the first available\
    \ entry.\n    if LANG_NEUTRAL in resources:\n        resources = resources[LANG_NEUTRAL]\n\
    \    else:\n        resources = next(iter(resources.items()))\n\n    manifest_xml\
    \ = resources\n    return manifest_xml\n\n### Source File Dependency Files Content\n\
    ### Dependency File: empty.txt\n\nOutput the complete test file, code only, no\
    \ explanations.\n### Time\nCurrent time: 2025-03-15 16:27:58\n"
  role: user
