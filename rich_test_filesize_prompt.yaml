messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: rich\nTest File Path: rich\\test_filesize\\\
    test_filesize.py\nProject Programming Language: Python\nTesting Framework: pytest\n\
    ### Source File Content\n### Source File Content:\n\"\"\"Functions for reporting\
    \ filesizes. Borrowed from https://github.com/PyFilesystem/pyfilesystem2\n\nThe\
    \ functions declared in this module should cover the different\nuse cases needed\
    \ to generate a string representation of a file size\nusing several different\
    \ units. Since there are many standards regarding\nfile size units, three different\
    \ functions have been implemented.\n\nSee Also:\n    * `Wikipedia: Binary prefix\
    \ <https://en.wikipedia.org/wiki/Binary_prefix>`_\n\n\"\"\"\n\n__all__ = [\"decimal\"\
    ]\n\nfrom typing import Iterable, List, Optional, Tuple\n\n\ndef _to_str(\n  \
    \  size: int,\n    suffixes: Iterable[str],\n    base: int,\n    *,\n    precision:\
    \ Optional[int] = 1,\n    separator: Optional[str] = \" \",\n) -> str:\n    if\
    \ size == 1:\n        return \"1 byte\"\n    elif size < base:\n        return\
    \ f\"{size:,} bytes\"\n\n    for i, suffix in enumerate(suffixes, 2):  # noqa:\
    \ B007\n        unit = base**i\n        if size < unit:\n            break\n \
    \   return \"{:,.{precision}f}{separator}{}\".format(\n        (base * size /\
    \ unit),\n        suffix,\n        precision=precision,\n        separator=separator,\n\
    \    )\n\n\ndef pick_unit_and_suffix(size: int, suffixes: List[str], base: int)\
    \ -> Tuple[int, str]:\n    \"\"\"Pick a suffix and base for the given size.\"\"\
    \"\n    for i, suffix in enumerate(suffixes):\n        unit = base**i\n      \
    \  if size < unit * base:\n            break\n    return unit, suffix\n\n\ndef\
    \ decimal(\n    size: int,\n    *,\n    precision: Optional[int] = 1,\n    separator:\
    \ Optional[str] = \" \",\n) -> str:\n    \"\"\"Convert a filesize in to a string\
    \ (powers of 1000, SI prefixes).\n\n    In this convention, ``1000 B = 1 kB``.\n\
    \n    This is typically the format used to advertise the storage\n    capacity\
    \ of USB flash drives and the like (*256 MB* meaning\n    actually a storage capacity\
    \ of more than *256 000 000 B*),\n    or used by **Mac OS X** since v10.6 to report\
    \ file sizes.\n\n    Arguments:\n        int (size): A file size.\n        int\
    \ (precision): The number of decimal places to include (default = 1).\n      \
    \  str (separator): The string to separate the value from the units (default =\
    \ \" \").\n\n    Returns:\n        `str`: A string containing a abbreviated file\
    \ size and units.\n\n    Example:\n        >>> filesize.decimal(30000)\n     \
    \   '30.0 kB'\n        >>> filesize.decimal(30000, precision=2, separator=\"\"\
    )\n        '30.00kB'\n\n    \"\"\"\n    return _to_str(\n        size,\n     \
    \   (\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"),\n      \
    \  1000,\n        precision=precision,\n        separator=separator,\n    )\n\n\
    ### Source File Dependency Files Content\n### Dependency File: empty.txt\n\nOutput\
    \ the complete test file, code only, no explanations.\n### Time\nCurrent time:\
    \ 2025-03-15 15:03:48\n"
  role: user
