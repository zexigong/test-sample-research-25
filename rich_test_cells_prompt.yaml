messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: rich\nTest File Path: rich\\test_cells\\\
    test_cells.py\nProject Programming Language: Python\nTesting Framework: pytest\n\
    ### Source File Content\n### Source File Content:\nfrom __future__ import annotations\n\
    \nfrom functools import lru_cache\nfrom typing import Callable\n\nfrom ._cell_widths\
    \ import CELL_WIDTHS\n\n# Ranges of unicode ordinals that produce a 1-cell wide\
    \ character\n# This is non-exhaustive, but covers most common Western characters\n\
    _SINGLE_CELL_UNICODE_RANGES: list[tuple[int, int]] = [\n    (0x20, 0x7E),  # Latin\
    \ (excluding non-printable)\n    (0xA0, 0xAC),\n    (0xAE, 0x002FF),\n    (0x00370,\
    \ 0x00482),  # Greek / Cyrillic\n    (0x02500, 0x025FC),  # Box drawing, box elements,\
    \ geometric shapes\n    (0x02800, 0x028FF),  # Braille\n]\n\n# A set of characters\
    \ that are a single cell wide\n_SINGLE_CELLS = frozenset(\n    [\n        character\n\
    \        for _start, _end in _SINGLE_CELL_UNICODE_RANGES\n        for character\
    \ in map(chr, range(_start, _end + 1))\n    ]\n)\n\n# When called with a string\
    \ this will return True if all\n# characters are single-cell, otherwise False\n\
    _is_single_cell_widths: Callable[[str], bool] = _SINGLE_CELLS.issuperset\n\n\n\
    @lru_cache(4096)\ndef cached_cell_len(text: str) -> int:\n    \"\"\"Get the number\
    \ of cells required to display text.\n\n    This method always caches, which may\
    \ use up a lot of memory. It is recommended to use\n    `cell_len` over this method.\n\
    \n    Args:\n        text (str): Text to display.\n\n    Returns:\n        int:\
    \ Get the number of cells required to display text.\n    \"\"\"\n    if _is_single_cell_widths(text):\n\
    \        return len(text)\n    return sum(map(get_character_cell_size, text))\n\
    \n\ndef cell_len(text: str, _cell_len: Callable[[str], int] = cached_cell_len)\
    \ -> int:\n    \"\"\"Get the number of cells required to display text.\n\n   \
    \ Args:\n        text (str): Text to display.\n\n    Returns:\n        int: Get\
    \ the number of cells required to display text.\n    \"\"\"\n    if len(text)\
    \ < 512:\n        return _cell_len(text)\n    if _is_single_cell_widths(text):\n\
    \        return len(text)\n    return sum(map(get_character_cell_size, text))\n\
    \n\n@lru_cache(maxsize=4096)\ndef get_character_cell_size(character: str) -> int:\n\
    \    \"\"\"Get the cell size of a character.\n\n    Args:\n        character (str):\
    \ A single character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2)\
    \ occupied by that character.\n    \"\"\"\n    codepoint = ord(character)\n  \
    \  _table = CELL_WIDTHS\n    lower_bound = 0\n    upper_bound = len(_table) -\
    \ 1\n    index = (lower_bound + upper_bound) // 2\n    while True:\n        start,\
    \ end, width = _table[index]\n        if codepoint < start:\n            upper_bound\
    \ = index - 1\n        elif codepoint > end:\n            lower_bound = index\
    \ + 1\n        else:\n            return 0 if width == -1 else width\n       \
    \ if upper_bound < lower_bound:\n            break\n        index = (lower_bound\
    \ + upper_bound) // 2\n    return 1\n\n\ndef set_cell_size(text: str, total: int)\
    \ -> str:\n    \"\"\"Set the length of a string to fit within given number of\
    \ cells.\"\"\"\n\n    if _is_single_cell_widths(text):\n        size = len(text)\n\
    \        if size < total:\n            return text + \" \" * (total - size)\n\
    \        return text[:total]\n\n    if total <= 0:\n        return \"\"\n    cell_size\
    \ = cell_len(text)\n    if cell_size == total:\n        return text\n    if cell_size\
    \ < total:\n        return text + \" \" * (total - cell_size)\n\n    start = 0\n\
    \    end = len(text)\n\n    # Binary search until we find the right size\n   \
    \ while True:\n        pos = (start + end) // 2\n        before = text[: pos +\
    \ 1]\n        before_len = cell_len(before)\n        if before_len == total +\
    \ 1 and cell_len(before[-1]) == 2:\n            return before[:-1] + \" \"\n \
    \       if before_len == total:\n            return before\n        if before_len\
    \ > total:\n            end = pos\n        else:\n            start = pos\n\n\n\
    def chop_cells(\n    text: str,\n    width: int,\n) -> list[str]:\n    \"\"\"\
    Split text into lines such that each line fits within the available (cell) width.\n\
    \n    Args:\n        text: The text to fold such that it fits in the given width.\n\
    \        width: The width available (number of cells).\n\n    Returns:\n     \
    \   A list of strings such that each string in the list has cell width\n     \
    \   less than or equal to the available width.\n    \"\"\"\n    _get_character_cell_size\
    \ = get_character_cell_size\n    lines: list[list[str]] = [[]]\n\n    append_new_line\
    \ = lines.append\n    append_to_last_line = lines[-1].append\n\n    total_width\
    \ = 0\n\n    for character in text:\n        cell_width = _get_character_cell_size(character)\n\
    \        char_doesnt_fit = total_width + cell_width > width\n\n        if char_doesnt_fit:\n\
    \            append_new_line([character])\n            append_to_last_line = lines[-1].append\n\
    \            total_width = cell_width\n        else:\n            append_to_last_line(character)\n\
    \            total_width += cell_width\n\n    return [\"\".join(line) for line\
    \ in lines]\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    print(get_character_cell_size(\"\
    \U0001F63D\"))\n    for line in chop_cells(\"\"\"这是对亚洲语言支持的测试。面对模棱两可的想法，拒绝猜测的诱惑。\"\
    \"\", 8):\n        print(line)\n    for n in range(80, 1, -1):\n        print(set_cell_size(\"\
    \"\"这是对亚洲语言支持的测试。面对模棱两可的想法，拒绝猜测的诱惑。\"\"\", n) + \"|\")\n        print(\"x\" *\
    \ n)\n\n### Source File Dependency Files Content\n### Dependency File: _cell_widths.py\n\
    # Auto generated by make_terminal_widths.py\n\nCELL_WIDTHS = [\n    (0, 0, 0),\n\
    \    (1, 31, -1),\n    (127, 159, -1),\n    (173, 173, 0),\n    (768, 879, 0),\n\
    \    (1155, 1161, 0),\n    (1425, 1469, 0),\n    (1471, 1471, 0),\n    (1473,\
    \ 1474, 0),\n    (1476, 1477, 0),\n    (1479, 1479, 0),\n    (1536, 1541, 0),\n\
    \    (1552, 1562, 0),\n    (1564, 1564, 0),\n    (1611, 1631, 0),\n    (1648,\
    \ 1648, 0),\n    (1750, 1757, 0),\n    (1759, 1764, 0),\n    (1767, 1768, 0),\n\
    \    (1770, 1773, 0),\n    (1807, 1807, 0),\n    (1809, 1809, 0),\n    (1840,\
    \ 1866, 0),\n    (1958, 1968, 0),\n    (2027, 2035, 0),\n    (2045, 2045, 0),\n\
    \    (2070, 2073, 0),\n    (2075, 2083, 0),\n    (2085, 2087, 0),\n    (2089,\
    \ 2093, 0),\n    (2137, 2139, 0),\n    (2192, 2193, 0),\n    (2200, 2207, 0),\n\
    \    (2250, 2307, 0),\n    (2362, 2364, 0),\n    (2366, 2383, 0),\n    (2385,\
    \ 2391, 0),\n    (2402, 2403, 0),\n    (2433, 2435, 0),\n    (2492, 2492, 0),\n\
    \    (2494, 2500, 0),\n    (2503, 2504, 0),\n    (2507, 2509, 0),\n    (2519,\
    \ 2519, 0),\n    (2530, 2531, 0),\n    (2558, 2558, 0),\n    (2561, 2563, 0),\n\
    \    (2620, 2620, 0),\n    (2622, 2626, 0),\n    (2631, 2632, 0),\n    (2635,\
    \ 2637, 0),\n    (2641, 2641, 0),\n    (2672, 2673, 0),\n    (2677, 2677, 0),\n\
    \    (2689, 2691, 0),\n    (2748, 2748, 0),\n    (2750, 2757, 0),\n    (2759,\
    \ 2761, 0),\n    (2763, 2765, 0),\n    (2786, 2787, 0),\n    (2810, 2815, 0),\n\
    \    (2817, 2819, 0),\n    (2876, 2876, 0),\n    (2878, 2884, 0),\n    (2887,\
    \ 2888, 0),\n    (2891, 2893, 0),\n    (2901, 2903, 0),\n    (2914, 2915, 0),\n\
    \    (2946, 2946, 0),\n    (3006, 3010, 0),\n    (3014, 3016, 0),\n    (3018,\
    \ 3021, 0),\n    (3031, 3031, 0),\n    (3072, 3076, 0),\n    (3132, 3132, 0),\n\
    \    (3134, 3140, 0),\n    (3142, 3144, 0),\n    (3146, 3149, 0),\n    (3157,\
    \ 3158, 0),\n    (3170, 3171, 0),\n    (3201, 3203, 0),\n    (3260, 3260, 0),\n\
    \    (3262, 3268, 0),\n    (3270, 3272, 0),\n    (3274, 3277, 0),\n    (3285,\
    \ 3286, 0),\n    (3298, 3299, 0),\n    (3315, 3315, 0),\n    (3328, 3331, 0),\n\
    \    (3387, 3388, 0),\n    (3390, 3396, 0),\n    (3398, 3400, 0),\n    (3402,\
    \ 3405, 0),\n    (3415, 3415, 0),\n    (3426, 3427, 0),\n    (3457, 3459, 0),\n\
    \    (3530, 3530, 0),\n    (3535, 3540, 0),\n    (3542, 3542, 0),\n    (3544,\
    \ 3551, 0),\n    (3570, 3571, 0),\n    (3633, 3633, 0),\n    (3636, 3642, 0),\n\
    \    (3655, 3662, 0),\n    (3761, 3761, 0),\n    (3764, 3772, 0),\n    (3784,\
    \ 3790, 0),\n    (3864, 3865, 0),\n    (3893, 3893, 0),\n    (3895, 3895, 0),\n\
    \    (3897, 3897, 0),\n    (3902, 3903, 0),\n    (3953, 3972, 0),\n    (3974,\
    \ 3975, 0),\n    (3981, 3991, 0),\n    (3993, 4028, 0),\n    (4038, 4038, 0),\n\
    \    (4139, 4158, 0),\n    (4182, 4185, 0),\n    (4190, 4192, 0),\n    (4194,\
    \ 4196, 0),\n    (4199, 4205, 0),\n    (4209, 4212, 0),\n    (4226, 4237, 0),\n\
    \    (4239, 4239, 0),\n    (4250, 4253, 0),\n    (4352, 4447, 2),\n    (4448,\
    \ 4607, 0),\n    (4957, 4959, 0),\n    (5906, 5909, 0),\n    (5938, 5940, 0),\n\
    \    (5970, 5971, 0),\n    (6002, 6003, 0),\n    (6068, 6099, 0),\n    (6109,\
    \ 6109, 0),\n    (6155, 6159, 0),\n    (6277, 6278, 0),\n    (6313, 6313, 0),\n\
    \    (6432, 6443, 0),\n    (6448, 6459, 0),\n    (6679, 6683, 0),\n    (6741,\
    \ 6750, 0),\n    (6752, 6780, 0),\n    (6783, 6783, 0),\n    (6832, 6862, 0),\n\
    \    (6912, 6916, 0),\n    (6964, 6980, 0),\n    (7019, 7027, 0),\n    (7040,\
    \ 7042, 0),\n    (7073, 7085, 0),\n    (7142, 7155, 0),\n    (7204, 7223, 0),\n\
    \    (7376, 7378, 0),\n    (7380, 7400, 0),\n    (7405, 7405, 0),\n    (7412,\
    \ 7412, 0),\n    (7415, 7417, 0),\n    (7616, 7679, 0),\n    (8203, 8207, 0),\n\
    \    (8232, 8238, 0),\n    (8288, 8292, 0),\n    (8294, 8303, 0),\n    (8400,\
    \ 8432, 0),\n    (8986, 8987, 2),\n    (9001, 9002, 2),\n    (9193, 9196, 2),\n\
    \    (9200, 9200, 2),\n    (9203, 9203, 2),\n    (9725, 9726, 2),\n    (9748,\
    \ 9749, 2),\n    (9800, 9811, 2),\n    (9855, 9855, 2),\n    (9875, 9875, 2),\n\
    \    (9889, 9889, 2),\n    (9898, 9899, 2),\n    (9917, 9918, 2),\n    (9924,\
    \ 9925, 2),\n    (9934, 9934, 2),\n    (9940, 9940, 2),\n    (9962, 9962, 2),\n\
    \    (9970, 9971, 2),\n    (9973, 9973, 2),\n    (9978, 9978, 2),\n    (9981,\
    \ 9981, 2),\n    (9989, 9989, 2),\n    (9994, 9995, 2),\n    (10024, 10024, 2),\n\
    \    (10060, 10060, 2),\n    (10062, 10062, 2),\n    (10067, 10069, 2),\n    (10071,\
    \ 10071, 2),\n    (10133, 10135, 2),\n    (10160, 10160, 2),\n    (10175, 10175,\
    \ 2),\n    (11035, 11036, 2),\n    (11088, 11088, 2),\n    (11093, 11093, 2),\n\
    \    (11503, 11505, 0),\n    (11647, 11647, 0),\n    (11744, 11775, 0),\n    (11904,\
    \ 11929, 2),\n    (11931, 12019, 2),\n    (12032, 12245, 2),\n    (12272, 12329,\
    \ 2),\n    (12330, 12335, 0),\n    (12336, 12350, 2),\n    (12353, 12438, 2),\n\
    \    (12441, 12442, 0),\n    (12443, 12543, 2),\n    (12549, 12591, 2),\n    (12593,\
    \ 12686, 2),\n    (12688, 12771, 2),\n    (12783, 12830, 2),\n    (12832, 12871,\
    \ 2),\n    (12880, 19903, 2),\n    (19968, 42124, 2),\n    (42128, 42182, 2),\n\
    \    (42607, 42610, 0),\n    (42612, 42621, 0),\n    (42654, 42655, 0),\n    (42736,\
    \ 42737, 0),\n    (43010, 43010, 0),\n    (43014, 43014, 0),\n    (43019, 43019,\
    \ 0),\n    (43043, 43047, 0),\n    (43052, 43052, 0),\n    (43136, 43137, 0),\n\
    \    (43188, 43205, 0),\n    (43232, 43249, 0),\n    (43263, 43263, 0),\n    (43302,\
    \ 43309, 0),\n    (43335, 43347, 0),\n    (43360, 43388, 2),\n    (43392, 43395,\
    \ 0),\n    (43443, 43456, 0),\n    (43493, 43493, 0),\n    (43561, 43574, 0),\n\
    \    (43587, 43587, 0),\n    (43596, 43597, 0),\n    (43643, 43645, 0),\n    (43696,\
    \ 43696, 0),\n    (43698, 43700, 0),\n    (43703, 43704, 0),\n    (43710, 43711,\
    \ 0),\n    (43713, 43713, 0),\n    (43755, 43759, 0),\n    (43765, 43766, 0),\n\
    \    (44003, 44010, 0),\n    (44012, 44013, 0),\n    (44032, 55203, 2),\n    (55216,\
    \ 55295, 0),\n    (63744, 64255, 2),\n    (64286, 64286, 0),\n    (65024, 65039,\
    \ 0),\n    (65040, 65049, 2),\n    (65056, 65071, 0),\n    (65072, 65106, 2),\n\
    \    (65108, 65126, 2),\n    (65128, 65131, 2),\n    (65279, 65279, 0),\n    (65281,\
    \ 65376, 2),\n    (65504, 65510, 2),\n    (65529, 65531, 0),\n    (66045, 66045,\
    \ 0),\n    (66272, 66272, 0),\n    (66422, 66426, 0),\n    (68097, 68099, 0),\n\
    \    (68101, 68102, 0),\n    (68108, 68111, 0),\n    (68152, 68154, 0),\n    (68159,\
    \ 68159, 0),\n    (68325, 68326, 0),\n    (68900, 68903, 0),\n    (69291, 69292,\
    \ 0),\n    (69373, 69375, 0),\n    (69446, 69456, 0),\n    (69506, 69509, 0),\n\
    \    (69632, 69634, 0),\n    (69688, 69702, 0),\n    (69744, 69744, 0),\n    (69747,\
    \ 69748, 0),\n    (69759, 69762, 0),\n    (69808, 69818, 0),\n    (69821, 69821,\
    \ 0),\n    (69826, 69826, 0),\n    (69837, 69837, 0),\n    (69888, 69890, 0),\n\
    \    (69927, 69940, 0),\n    (69957, 69958, 0),\n    (70003, 70003, 0),\n    (70016,\
    \ 70018, 0),\n    (70067, 70080, 0),\n    (70089, 70092, 0),\n    (70094, 70095,\
    \ 0),\n    (70188, 70199, 0),\n    (70206, 70206, 0),\n    (70209, 70209, 0),\n\
    \    (70367, 70378, 0),\n    (70400, 70403, 0),\n    (70459, 70460, 0),\n    (70462,\
    \ 70468, 0),\n    (70471, 70472, 0),\n    (70475, 70477, 0),\n    (70487, 70487,\
    \ 0),\n    (70498, 70499, 0),\n    (70502, 70508, 0),\n    (70512, 70516, 0),\n\
    \    (70709, 70726, 0),\n    (70750, 70750, 0),\n    (70832, 70851, 0),\n    (71087,\
    \ 71093, 0),\n    (71096, 71104, 0),\n    (71132, 71133, 0),\n    (71216, 71232,\
    \ 0),\n    (71339, 71351, 0),\n    (71453, 71467, 0),\n    (71724, 71738, 0),\n\
    \    (71984, 71989, 0),\n    (71991, 71992, 0),\n    (71995, 71998, 0),\n    (72000,\
    \ 72000, 0),\n    (72002, 72003, 0),\n    (72145, 72151, 0),\n    (72154, 72160,\
    \ 0),\n    (72164, 72164, 0),\n    (72193, 72202, 0),\n    (72243, 72249, 0),\n\
    \    (72251, 72254, 0),\n    (72263, 72263, 0),\n    (72273, 72283, 0),\n    (72330,\
    \ 72345, 0),\n    (72751, 72758, 0),\n    (72760, 72767, 0),\n    (72850, 72871,\
    \ 0),\n    (72873, 72886, 0),\n    (73009, 73014, 0),\n    (73018, 73018, 0),\n\
    \    (73020, 73021, 0),\n    (73023, 73029, 0),\n    (73031, 73031, 0),\n    (73098,\
    \ 73102, 0),\n    (73104, 73105, 0),\n    (73107, 73111, 0),\n    (73459, 73462,\
    \ 0),\n    (73472, 73473, 0),\n    (73475, 73475, 0),\n    (73524, 73530, 0),\n\
    \    (73534, 73538, 0),\n    (78896, 78912, 0),\n    (78919, 78933, 0),\n    (92912,\
    \ 92916, 0),\n    (92976, 92982, 0),\n    (94031, 94031, 0),\n    (94033, 94087,\
    \ 0),\n    (94095, 94098, 0),\n    (94176, 94179, 2),\n    (94180, 94180, 0),\n\
    \    (94192, 94193, 0),\n    (94208, 100343, 2),\n    (100352, 101589, 2),\n \
    \   (101632, 101640, 2),\n    (110576, 110579, 2),\n    (110581, 110587, 2),\n\
    \    (110589, 110590, 2),\n    (110592, 110882, 2),\n    (110898, 110898, 2),\n\
    \    (110928, 110930, 2),\n    (110933, 110933, 2),\n    (110948, 110951, 2),\n\
    \    (110960, 111355, 2),\n    (113821, 113822, 0),\n    (113824, 113827, 0),\n\
    \    (118528, 118573, 0),\n    (118576, 118598, 0),\n    (119141, 119145, 0),\n\
    \    (119149, 119170, 0),\n    (119173, 119179, 0),\n    (119210, 119213, 0),\n\
    \    (119362, 119364, 0),\n    (121344, 121398, 0),\n    (121403, 121452, 0),\n\
    \    (121461, 121461, 0),\n    (121476, 121476, 0),\n    (121499, 121503, 0),\n\
    \    (121505, 121519, 0),\n    (122880, 122886, 0),\n    (122888, 122904, 0),\n\
    \    (122907, 122913, 0),\n    (122915, 122916, 0),\n    (122918, 122922, 0),\n\
    \    (123023, 123023, 0),\n    (123184, 123190, 0),\n    (123566, 123566, 0),\n\
    \    (123628, 123631, 0),\n    (124140, 124143, 0),\n    (125136, 125142, 0),\n\
    \    (125252, 125258, 0),\n    (126980, 126980, 2),\n    (127183, 127183, 2),\n\
    \    (127374, 127374, 2),\n    (127377, 127386, 2),\n    (127488, 127490, 2),\n\
    \    (127504, 127547, 2),\n    (127552, 127560, 2),\n    (127568, 127569, 2),\n\
    \    (127584, 127589, 2),\n    (127744, 127776, 2),\n    (127789, 127797, 2),\n\
    \    (127799, 127868, 2),\n    (127870, 127891, 2),\n    (127904, 127946, 2),\n\
    \    (127951, 127955, 2),\n    (127968, 127984, 2),\n    (127988, 127988, 2),\n\
    \    (127992, 127994, 2),\n    (127995, 127999, 0),\n    (128000, 128062, 2),\n\
    \    (128064, 128064, 2),\n    (128066, 128252, 2),\n    (128255, 128317, 2),\n\
    \    (128331, 128334, 2),\n    (128336, 128359, 2),\n    (128378, 128378, 2),\n\
    \    (128405, 128406, 2),\n    (128420, 128420, 2),\n    (128507, 128591, 2),\n\
    \    (128640, 128709, 2),\n    (128716, 128716, 2),\n    (128720, 128722, 2),\n\
    \    (128725, 128727, 2),\n    (128732, 128735, 2),\n    (128747, 128748, 2),\n\
    \    (128756, 128764, 2),\n    (128992, 129003, 2),\n    (129008, 129008, 2),\n\
    \    (129292, 129338, 2),\n    (129340, 129349, 2),\n    (129351, 129535, 2),\n\
    \    (129648, 129660, 2),\n    (129664, 129672, 2),\n    (129680, 129725, 2),\n\
    \    (129727, 129733, 2),\n    (129742, 129755, 2),\n    (129760, 129768, 2),\n\
    \    (129776, 129784, 2),\n    (131072, 196605, 2),\n    (196608, 262141, 2),\n\
    \    (917505, 917505, 0),\n    (917536, 917631, 0),\n    (917760, 917999, 0),\n\
    ]\n\nOutput the complete test file, code only, no explanations.\n### Time\nCurrent\
    \ time: 2025-03-15 15:01:53\n"
  role: user
